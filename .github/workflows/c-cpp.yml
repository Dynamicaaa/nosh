name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
        include:
          - os: ubuntu-latest
            arch: x64
            dependencies: >
              build-essential
              libreadline-dev
              libssl-dev
              libmbedtls-dev
              libargon2-dev
              pkg-config
          - os: macos-latest
            arch: x64
            dependencies: >
              readline
              openssl
              mbedtls
              argon2
          - os: macos-latest
            arch: arm64
            dependencies: >
              readline
              openssl
              mbedtls
              argon2
          - os: windows-latest
            arch: x64
            dependencies: >
              mingw-w64

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history to get git commit info

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.dependencies }}

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install Rosetta 2 for x86_64 emulation on M1
        if [ "${{ matrix.arch }}" = "x64" ] && [ "$(uname -m)" = "arm64" ]; then
          softwareupdate --install-rosetta --agree-to-license
        fi
        
        # Create and set permissions for Homebrew directories
        if [ "${{ matrix.arch }}" = "x64" ]; then
          sudo mkdir -p /usr/local/opt /usr/local/share/man/man1
          sudo chown -R $(whoami) /usr/local/opt /usr/local/share
          sudo chmod u+w /usr/local/opt /usr/local/share/man/man1
          
          # Install Homebrew if not present
          if [ ! -f "/usr/local/bin/brew" ]; then
            cd /tmp
            mkdir homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew
            sudo mkdir -p /usr/local/Homebrew
            sudo mv homebrew/* /usr/local/Homebrew/
            sudo ln -sf /usr/local/Homebrew/bin/brew /usr/local/bin/brew
            sudo chown -R $(whoami) /usr/local/Homebrew
          fi
          
          HOMEBREW_PREFIX="/usr/local"
          echo "HOMEBREW_PREFIX=/usr/local" >> $GITHUB_ENV
          
          # Install x86_64 versions of dependencies
          if [ "$(uname -m)" = "arm64" ]; then
            arch -x86_64 /usr/local/bin/brew install readline openssl mbedtls argon2 pkg-config
          else
            /usr/local/bin/brew install readline openssl mbedtls argon2 pkg-config
          fi
        else
          HOMEBREW_PREFIX="/opt/homebrew"
          echo "HOMEBREW_PREFIX=/opt/homebrew" >> $GITHUB_ENV
          brew install readline openssl mbedtls argon2 pkg-config
        fi
        
        echo "MBEDTLS_PREFIX=$(${HOMEBREW_PREFIX}/bin/brew --prefix mbedtls)" >> $GITHUB_ENV
        echo "ARGON2_PREFIX=$(${HOMEBREW_PREFIX}/bin/brew --prefix argon2)" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(${HOMEBREW_PREFIX}/bin/brew --prefix mbedtls)/lib/pkgconfig:$(${HOMEBREW_PREFIX}/bin/brew --prefix openssl)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(${HOMEBREW_PREFIX}/bin/brew --prefix mbedtls)/lib -L$(${HOMEBREW_PREFIX}/bin/brew --prefix argon2)/lib" >> $GITHUB_ENV
        echo "CFLAGS=-I$(${HOMEBREW_PREFIX}/bin/brew --prefix mbedtls)/include -I$(${HOMEBREW_PREFIX}/bin/brew --prefix argon2)/include" >> $GITHUB_ENV

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-mbedtls
          mingw-w64-x86_64-argon2
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-windows-default-manifest
          mingw-w64-x86_64-ncurses
          mingw-w64-x86_64-pdcurses
          git

    - name: Configure Git (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        git config --global --add safe.directory '*'

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$MBEDTLS_PREFIX;$ARGON2_PREFIX" \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DCMAKE_FIND_FRAMEWORK=LAST \
            -DCMAKE_INSTALL_NAME_DIR=@executable_path/../lib \
            -DCMAKE_BUILD_WITH_INSTALL_NAME_DIR=ON \
            -DCMAKE_LIBRARY_PATH="$(brew --prefix mbedtls)/lib;$(brew --prefix argon2)/lib" \
            -DCMAKE_INCLUDE_PATH="$(brew --prefix mbedtls)/include;$(brew --prefix argon2)/include" \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch == 'arm64' && 'arm64' || 'x86_64' }}
        else
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        fi 

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cmake -B build -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
          -DCMAKE_MAKE_PROGRAM=/mingw64/bin/mingw32-make.exe \
          -DCMAKE_C_FLAGS="-D_GNU_SOURCE -D_WIN32 -DWIN32_LEAN_AND_MEAN" \
          -DCMAKE_PREFIX_PATH=/mingw64 \
          -DCMAKE_LIBRARY_PATH=/mingw64/lib \
          -DCMAKE_INCLUDE_PATH="/mingw64/include;/mingw64/include/readline" \
          -DREADLINE_ROOT=/mingw64 \
          -DCMAKE_EXE_LINKER_FLAGS="-static-libgcc -static-libstdc++ -Wl,-Bstatic -lpdcurses -lreadline -lmbedtls -lmbedcrypto -lmbedx509 -largon2 -Wl,-Bdynamic -lws2_32 -liphlpapi -lbcrypt"

    # Add build steps for all platforms
    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd build && make VERBOSE=1

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cd build && mingw32-make VERBOSE=1

    # Version test steps
    - name: Test Version (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        ./build/nosh --version

    - name: Test Version (Windows) 
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        ./build/nosh.exe --version

    # Keep existing artifact upload
    - uses: actions/upload-artifact@v4
      with:
        name: nosh-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          build/nosh
          build/nosh.exe