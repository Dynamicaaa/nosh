name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build-linux:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libreadline-dev libmbedtls-dev libargon2-dev
      - name: Configure CMake
        run: cmake -B build -DVERSION=${{needs.version.outputs.version}}
      - name: Build
        run: cmake --build build
      - name: Test binary
        run: |
          test -f build/nosh
          ./build/nosh --version || true
      - uses: actions/upload-artifact@v4
        with:
          name: nosh-linux
          path: build/nosh*

  build-macos:
    needs: version
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          brew install cmake readline openssl argon2 mbedtls
      - name: Configure CMake
        run: |
          cmake -B build \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DVERSION=${{needs.version.outputs.version}}
      - name: Build
        run: cmake --build build
      - name: Test binary
        run: |
          test -f build/nosh
          ./build/nosh --version || true
      - uses: actions/upload-artifact@v4
        with:
          name: nosh-macos
          path: build/nosh*

  build-windows:
    needs: version
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          vcpkg install readline:x64-windows mbedtls:x64-windows argon2:x64-windows
      - name: Configure CMake
        run: |
          cmake -B build -S . `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" `
            -DVERSION=${{needs.version.outputs.version}}
      - name: Build
        run: cmake --build build --config Release
      - name: Test binary
        run: |
          if (!(Test-Path "build/Release/nosh.exe")) { exit 1 }
          .\build\Release\nosh.exe --version
      - uses: actions/upload-artifact@v4
        with:
          name: nosh-windows
          path: |
            build/Release/nosh.exe
            build/Release/*.dll