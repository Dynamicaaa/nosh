name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build:
    needs: version
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: macos-latest
            arch: [x86_64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install Build Tools
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake gcc g++

      - name: Install Build Tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install "conan>=2.0.0"
          conan profile detect --force

      - name: Setup Conan Profile (Unix)
        if: runner.os == 'Linux'
        run: |
          cat > default_profile << EOF
          [settings]
          arch=x86_64
          build_type=Release
          compiler=gcc
          compiler.cppstd=gnu17
          compiler.libcxx=libstdc++11
          compiler.version=11
          os=Linux

          [buildenv]
          CC=/usr/bin/gcc
          CXX=/usr/bin/g++
          EOF
          
          mkdir -p ~/.conan2/profiles/
          mv default_profile ~/.conan2/profiles/default

      - name: Configure Conan Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          conan install . \
            --output-folder=build-x86_64 \
            --build=missing \
            -s build_type=Release \
            -s arch=x86_64 \
            -s compiler=apple-clang \
            -s compiler.libcxx=libc++ \
            -g CMakeToolchain \
            -g CMakeDeps \
            -c tools.cmake.cmaketoolchain:generator=Ninja

          conan install . \
            --output-folder=build-arm64 \
            --build=missing \
            -s build_type=Release \
            -s arch=armv8 \
            -s compiler=apple-clang \
            -s compiler.libcxx=libc++ \
            -g CMakeToolchain \
            -g CMakeDeps \
            -c tools.cmake.cmaketoolchain:generator=Ninja

      - name: Configure Conan Dependencies (Unix)
        if: runner.os == 'Linux'
        run: |
          mkdir -p build
          conan install . \
            --output-folder=build \
            --build=missing \
            -s build_type=Release \
            -s compiler=gcc \
            -s compiler.libcxx=libstdc++11 \
            -s compiler.version=11 \
            -s arch=x86_64 \
            -g CMakeToolchain \
            -g CMakeDeps \
            -c tools.cmake.cmaketoolchain:generator=Ninja
          ls -la build/

      - name: Configure Conan Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          conan install . `
            --output-folder=build `
            --build=missing `
            -s build_type=Release `
            -s compiler="Visual Studio"

      - name: Configure CMake (Unix)
        if: runner.os == 'Linux'
        run: |
          source ~/.profile
          export PATH="/usr/bin:$PATH"
          cmake -B build \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DVERSION=${{needs.version.outputs.version}} \
            -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake -B build -S . `
            -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake `
            -DCMAKE_BUILD_TYPE=Release `
            -DVERSION=${{needs.version.outputs.version}}

      - name: Configure CMake (macOS Universal)  
        if: runner.os == 'macOS'
        run: |
          cmake -B build-x86_64 \
            -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DVERSION=${{needs.version.outputs.version}}
          
          cmake -B build-arm64 \
            -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DCMAKE_BUILD_TYPE=Release \
            -DVERSION=${{needs.version.outputs.version}}

      - name: Build (Unix/Windows)
        if: runner.os != 'macOS'
        run: cmake --build build --config Release

      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          cmake --build build-x86_64
          cmake --build build-arm64
          mkdir -p build/Release
          lipo -create \
            build-x86_64/nosh \
            build-arm64/nosh \
            -output build/Release/nosh

      - name: Upload Artifacts (Unix)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-linux
          path: build/nosh

      - name: Upload Artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-macos
          path: build/Release/nosh

      - name: Upload Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-windows
          path: |
            build/Release/nosh.exe
            build/Release/*.dll