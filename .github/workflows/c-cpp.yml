name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi
          
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build-linux:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libreadline-dev libmbedtls-dev libargon2-dev

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh

      - name: Test version
        run: ./build/nosh --version || true

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-linux
          path: |
            build/nosh*
            build/*.so

  build-macos:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up OSXCross
        run: |
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
          mkdir -p tarballs
          mv MacOSX11.3.sdk.tar.xz tarballs/
          UNATTENDED=1 ./build.sh
          echo "OSXCROSS_ROOT=$(pwd)" >> $GITHUB_ENV
          echo "$(pwd)/target/bin" >> $GITHUB_PATH
          cd ..

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake make clang llvm

      - name: Configure CMake
        env:
          OSXCROSS_ROOT: ${{ env.OSXCROSS_ROOT }}
          CC: ${{ env.OSXCROSS_ROOT }}/target/bin/o64-clang
          CXX: ${{ env.OSXCROSS_ROOT }}/target/bin/o64-clang++
        run: |
          # Verify OSXCross environment
          ls -la $OSXCROSS_ROOT/target/bin/
          echo "PATH=$PATH"
          
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/darwin-toolchain.cmake \
          -DCMAKE_SYSTEM_NAME=Darwin \
          -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_OSX_SYSROOT="${OSXCROSS_ROOT}/target/SDK/MacOSX11.3.sdk" \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-macos
          path: |
            build/nosh*
            build/*.dylib

  build-windows:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install MinGW Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-mingw-w64 g++-mingw-w64 make mingw-w64-tools

      - name: Install MinGW mbedtls
        run: |
          git clone --depth 1 --branch v3.5.2 https://github.com/Mbed-TLS/mbedtls.git
          cd mbedtls
          mkdir build && cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 \
            -DCMAKE_TOOLCHAIN_FILE=../../cmake/windows-toolchain.cmake \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DUSE_SHARED_MBEDTLS_LIBRARY=ON \
            -DENABLE_PROGRAMS=OFF \
            -DENABLE_TESTING=OFF \
            -DGEN_FILES=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DMBEDTLS_FATAL_WARNINGS=OFF
          cmake --build . -j$(nproc)
          sudo cmake --install .
          cd ../..

      - name: Install MinGW Argon2
        run: |
          git clone --depth 1 https://github.com/P-H-C/phc-winner-argon2.git
          cd phc-winner-argon2
          mkdir build && cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32 \
            -DCMAKE_TOOLCHAIN_FILE=../../cmake/windows-toolchain.cmake \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_BUILD_TYPE=Release \
            -DARGON2_BUILD_SHARED_LIBS=ON
          cmake --build . -j$(nproc)
          sudo cmake --install .
          cd ../..

      - name: Configure CMake 
        run: |
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/windows-toolchain.cmake \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_PREFIX_PATH=/usr/x86_64-w64-mingw32 \
          -DCMAKE_BUILD_TYPE=Release \
          -Dmbedtls_DIR=/usr/x86_64-w64-mingw32/lib/cmake/mbedtls \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh.exe

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-windows
          path: |
            build/nosh.exe
            build/*.dll