name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi
          
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT
          
          # Update version.h.in template
          sed -i "s/@PROJECT_VERSION@/$VERSION_STRING/g" include/version.h.in

  build-all:
    needs: version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux, macos, windows]
        
    steps:
      - uses: actions/checkout@v2

      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            gcc-mingw-w64 g++-mingw-w64 mingw-w64-tools \
            clang llvm lld osxcross \
            libreadline-dev libmbedtls-dev libargon2-dev

      - name: Configure CMake for Linux
        if: matrix.target == 'linux'
        run: |
          cmake -B build -S . \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Configure CMake for macOS
        if: matrix.target == 'macos'
        run: |
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/macos-toolchain.cmake \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Configure CMake for Windows
        if: matrix.target == 'windows'
        run: |
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/windows-toolchain.cmake \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary exists
        if: matrix.target == 'linux'
        run: test -f build/nosh

      - name: Check binary exists (Windows)
        if: matrix.target == 'windows'
        run: test -f build/nosh.exe

      - name: Check binary exists (macOS)
        if: matrix.target == 'macos'
        run: test -f build/nosh

      - name: Test version command
        if: matrix.target == 'linux'
        run: |
          ./build/nosh --version || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nosh-${{ matrix.target }}
          path: |
            build/nosh*
            build/*.dll
            build/*.dylib
            build/*.so