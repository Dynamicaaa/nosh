name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi
          
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build-linux:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config \
            libreadline-dev libmbedtls-dev libargon2-dev

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh

      - name: Test version
        run: ./build/nosh --version || true

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-linux
          path: |
            build/nosh*
            build/*.so

  build-macos:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-darwin-x86-64 g++-darwin-x86-64

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/darwin-toolchain.cmake \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-macos
          path: |
            build/nosh*
            build/*.dylib

  build-windows:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-mingw-w64 g++-mingw-w64

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DCMAKE_TOOLCHAIN_FILE=cmake/windows-toolchain.cmake \
          -DCMAKE_SYSTEM_NAME=Windows \
          -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary
        run: test -f build/nosh.exe

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-windows
          path: |
            build/nosh*
            build/*.dll