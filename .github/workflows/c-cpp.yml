name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi
          
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build:
    needs: version
    strategy:
      matrix:
        include:
          - target: linux
            os: ubuntu-latest
            packages: build-essential cmake pkg-config libreadline-dev libmbedtls-dev libargon2-dev
          - target: macos
            os: macos-latest
            packages: readline mbedtls argon2
          - target: windows
            os: windows-latest
            packages: cmake

    runs-on: ${{ matrix.os }}
        
    steps:
      - uses: actions/checkout@v3

      - name: Check for git
        run: |
          if ! command -v git &> /dev/null; then
            if [ "${{ matrix.target }}" == "linux" ]; then
              sudo apt-get update
              sudo apt-get install -y git
            elif [ "${{ matrix.target }}" == "macos" ]; then
              brew install git
            fi
          fi

      - name: Install dependencies (Linux)
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.packages }}

      - name: Install dependencies (macOS)
        if: matrix.target == 'macos'
        run: |
          brew install ${{ matrix.packages }}

      - name: Install dependencies (Windows)
        if: matrix.target == 'windows'
        uses: microsoft/setup-msbuild@v1

      - name: Configure CMake
        run: |
          cmake -B build -S . \
          -DVERSION=${{needs.version.outputs.version}}

      - name: Build
        run: cmake --build build

      - name: Check binary exists
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "windows" ]]; then
            test -f build/nosh.exe
          else
            test -f build/nosh
          fi

      - name: Test version command
        if: matrix.target != 'windows'
        shell: bash
        run: |
          ./build/nosh --version || true

      - uses: actions/upload-artifact@v4
        with:
          name: nosh-${{ matrix.target }}
          path: |
            build/nosh*
            build/*.dll
            build/*.dylib
            build/*.so