name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            dependencies: >
              build-essential
              libreadline-dev
              libssl-dev
              libmbedtls-dev
              libargon2-dev
              pkg-config
          - os: macos-latest
            dependencies: >
              readline
              openssl
              mbedtls
              argon2
          - os: windows-latest
            dependencies: >
              mingw-w64

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.dependencies }}

    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install readline openssl mbedtls argon2 pkg-config
        echo "MBEDTLS_PREFIX=$(brew --prefix mbedtls)" >> $GITHUB_ENV
        echo "ARGON2_PREFIX=$(brew --prefix argon2)" >> $GITHUB_ENV
        echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
        # Configure pkg-config to find mbedtls
        echo "PKG_CONFIG_PATH=$(brew --prefix mbedtls)/lib/pkgconfig:$(brew --prefix openssl)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix mbedtls)/lib -L$(brew --prefix argon2)/lib" >> $GITHUB_ENV
        echo "CFLAGS=-I$(brew --prefix mbedtls)/include -I$(brew --prefix argon2)/include" >> $GITHUB_ENV

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-mbedtls
          mingw-w64-x86_64-argon2
          mingw-w64-x86_64-pkgconf
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-windows-default-manifest

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$MBEDTLS_PREFIX;$ARGON2_PREFIX" \
            -DOPENSSL_ROOT_DIR=$(brew --prefix openssl) \
            -DCMAKE_FIND_FRAMEWORK=LAST \
            -DCMAKE_INSTALL_NAME_DIR=@executable_path/../lib \
            -DCMAKE_BUILD_WITH_INSTALL_NAME_DIR=ON \
            -DCMAKE_LIBRARY_PATH="$(brew --prefix mbedtls)/lib;$(brew --prefix argon2)/lib" \
            -DCMAKE_INCLUDE_PATH="$(brew --prefix mbedtls)/include;$(brew --prefix argon2)/include"
        else
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        fi

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cmake -B build -G "MinGW Makefiles" \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=/mingw64/bin/gcc.exe \
          -DCMAKE_MAKE_PROGRAM=/mingw64/bin/mingw32-make.exe \
          -DCMAKE_C_FLAGS="-D_GNU_SOURCE -D_WIN32 -DWIN32_LEAN_AND_MEAN -DGLOB_INTERNAL -I${MSYS2_PREFIX}/include" \
          -DCMAKE_PREFIX_PATH=/mingw64 \
          -DCMAKE_LIBRARY_PATH=/mingw64/lib \
          -DCMAKE_INCLUDE_PATH=/mingw64/include

    - name: Build
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cd build && mingw32-make VERBOSE=1

    - uses: actions/upload-artifact@v4
      with:
        name: nosh-${{ matrix.os }}
        path: |
          build/nosh
          build/nosh.exe