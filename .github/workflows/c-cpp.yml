name: C/C++ CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: get_version
        name: Get version
        run: |
          VERSION="0.1.0"
          COMMIT=$(git rev-parse --short HEAD || echo "unknown")
          VERSION_STRING="$VERSION-$COMMIT"
          echo "version=$VERSION_STRING" >> $GITHUB_OUTPUT

  build:
    needs: version
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake gcc g++ \
            libssl-dev libreadline-dev libncurses5-dev \
            ninja-build
            
      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja openssl@3 readline ncurses argon2

      - name: Configure CMake (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -B build -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DVERSION=${{needs.version.outputs.version}}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cmake -B build -S . `
            -DCMAKE_BUILD_TYPE=Release `
            -DWINDOWS_BUILD=ON `
            -DVERSION=${{needs.version.outputs.version}}

      - name: Configure CMake (macOS Universal)
        if: runner.os == 'macOS'
        run: |
          cmake -B build-x86_64 -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DVERSION=${{needs.version.outputs.version}}
          
          cmake -B build-arm64 -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DVERSION=${{needs.version.outputs.version}}

      - name: Build (Unix/Windows)
        if: runner.os != 'macOS'
        run: cmake --build build --config Release

      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          cmake --build build-x86_64
          cmake --build build-arm64
          mkdir -p build/Release
          lipo -create \
            build-x86_64/nosh \
            build-arm64/nosh \
            -output build/Release/nosh

      - name: Upload Artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-linux
          path: build/nosh

      - name: Upload Artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-macos
          path: build/Release/nosh

      - name: Upload Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: nosh-windows
          path: build/Release/nosh.exe